#!/usr/bin/env python
# -*- coding: utf-8 -*-

import daemon
import json
import subprocess
import time
import os
import shutil
import socket
import sys
import urllib
import urllib2
import urlparse
from ConfigParser import SafeConfigParser

TMP_SRC_FILE = ''
TMP_IMG_FILE = ''

FUZETSU_EXECUTABLE = 'fuzetsu'
GET_PROBLEM_PATH = 'get_unjudged.php'
PUT_RESULT_PATH = 'put_result.php'

POLL_PROBLEM_INTERVAL = 1

def write_to_file(filename, content):
	f = open(filename, 'w')
	f.write(content)
	f.close()


def read_problem(outlaw_url):
	t = {}
	t['status'] = 'not_loaded'

	while t['status'] != 'success':
		try:
			hostname = socket.gethostbyaddr(socket.gethostname())[0]

			param_query = urllib.urlencode({'hostname': hostname})

			url = urlparse.urljoin(outlaw_url, GET_PROBLEM_PATH)
			url = urlparse.urljoin(url, '?' + param_query)

			url_instance = urllib2.urlopen(url)
			t = json.loads(url_instance.read(), 'utf-8')
			url_instance.close()

			if t['status'] != 'success':
				time.sleep(POLL_PROBLEM_INTERVAL)
		except:
			# サーバの調子が悪い時は、少し待った上で何も気にせず再開する。
			time.sleep(10)

	return t


def output_result(outlaw_url, result):
	try:
		url = urlparse.urljoin(outlaw_url, PUT_RESULT_PATH)
		url_instance = urllib2.urlopen(url, json.dumps(result))
	except:
		pass
		# TODO: もう少しまともに処理する
		# 現時点では、とりあえず他のサーバが処理してくれるはずなので無視


def execute_input(img_file, in_txt):
	item_res = {}

	shutil.copy(img_file, img_file + '.copy')

	start_time = time.time()

	p = subprocess.Popen([FUZETSU_EXECUTABLE, 'run', img_file + '.copy'],
			     stdin=subprocess.PIPE,
			     stdout=subprocess.PIPE,
			     stderr=subprocess.PIPE)
	p.stdin.write(in_txt.replace('\n', '\r\n'))
	p.stdin.write("\x04") # EOF
	p.stdin.close()
	exitstatus = p.wait()
	end_time = time.time()

	item_res['output'] = p.stdout.read()

	os.remove(img_file + '.copy')
	
	item_res['execution_time'] = end_time - start_time

	if exitstatus == 0:
		item_res['status'] = 'success'
	elif exitstatus == 124:
		item_res['status'] = 'soft_tle'
	elif exitstatus == 125:
		item_res['status'] = 'soft_fail'
	elif exitstatus == 126:
		item_res['status'] = 'soft_fail'
	elif exitstatus == 127:
		item_res['status'] = 'soft_fail'
	elif exitstatus == 137:
		item_res['status'] = 'soft_tle'
	else:
		item_res['status'] = 'soft_fail'

	return item_res


def build_src(src_file, img_file, language):
	start_time = time.time()

	p = subprocess.Popen([FUZETSU_EXECUTABLE, 'build', language, src_file, img_file],
			     stdin=subprocess.PIPE,
			     stdout=subprocess.PIPE,
			     stderr=subprocess.PIPE)
	p.stdin.close()
	exitstatus = p.wait()
	compile_message = p.stdout.read()

	end_time = time.time()

	res = {}
	res['build_time'] = end_time - start_time
	res['output_list'] = []


	if exitstatus == 0:
		res['status'] = 'success'
	elif exitstatus == 124:
		res['error_message'] = 'Compile timed out.'
		res['status'] = 'soft_build_tle'
	elif exitstatus == 125:
		res['status'] = 'soft_build_fail'
	elif exitstatus == 126:
		res['status'] = 'soft_build_fail'
	elif exitstatus == 127:
		res['status'] = 'soft_build_fail'
	elif exitstatus == 137:
		res['error_message'] = 'Compile timed out.'
		res['status'] = 'soft_build_tle'
	else:
		res['error_message'] = compile_message
		res['status'] = 'build_fail'

	return res

		

def main():
	parser = SafeConfigParser()
	parser.read(os.environ['FLAMEHAZE_CONFIG_FILE'])

	outlaw_uri = parser.get('flamehaze', 'outlaw_url')
	outlaw_username = parser.get('flamehaze', 'outlaw_username')
	outlaw_passwd = parser.get('flamehaze', 'outlaw_password')
	TMP_SRC_FILE = os.environ['FLAMEHAZE_TMP_SRC_FILE']
	TMP_IMG_FILE = os.environ['FLAMEHAZE_TMP_IMG_FILE']


	passwd_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
	passwd_mgr.add_password(None, outlaw_uri, outlaw_username, outlaw_passwd)

	handler = urllib2.HTTPBasicAuthHandler(passwd_mgr)
	opener = urllib2.build_opener(handler)

	urllib2.install_opener(opener)

	while True:
		submission = read_problem(outlaw_uri)
	
		write_to_file(TMP_SRC_FILE, submission['source_code'])
		res = build_src(TMP_SRC_FILE, TMP_IMG_FILE, submission['language'])

		res['submission_id'] = submission['submission_id']
		res['judger_hostname'] = socket.gethostbyaddr(socket.gethostname())[0]
		
		if res['status'] != 'success':
			output_result(outlaw_uri, res)
			continue

		res['status'] = 'success'

		for in_txt in submission['input_list']:
			item_res = {}

			start_time = time.time()

			item_res = execute_input(TMP_IMG_FILE, in_txt)
			res['output_list'].append(item_res)
			
			if item_res['status'] != 'success':
				res['status'] = item_res['status']
				break

		output_result(outlaw_uri, res)


if __name__ == '__main__':
	if len(sys.argv) > 1:
		if sys.argv[1] == '-d':
			with daemon.DaemonContext():
				main()
		else:
			main()
	else:
		main()
